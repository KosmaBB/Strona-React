{"ast":null,"code":"var _jsxFileName = \"/Users/Kosmo/Documents/React/mapa-polski/src/components/MapaPolski.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from 'react-simple-maps';\nimport axios from 'axios';\n\n// GeoJSON danych dla województw Polski\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst geoUrl = \"https://raw.githubusercontent.com/deldersveld/topojson/master/countries/poland/poland-voivodeships.json\";\nconst MapaPolski = () => {\n  _s();\n  const [selectedVoivodeship, setSelectedVoivodeship] = useState(null);\n  const [cities, setCities] = useState([]);\n\n  // Funkcja do pobierania miast z API GOV.pl\n  const fetchCities = async voivodeshipId => {\n    try {\n      const response = await axios.get(`https://api.stat.gov.pl/api/v1/localities?format=json&level=6&parent_id=${voivodeshipId}`);\n      setCities(response.data);\n    } catch (error) {\n      console.error(\"Błąd podczas pobierania danych:\", error);\n    }\n  };\n\n  // Obsługa kliknięcia na województwo\n  const handleVoivodeshipClick = voivodeship => {\n    setSelectedVoivodeship(voivodeship);\n    fetchCities(voivodeship.id); // Pobierz miasta dla wybranego województwa\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ComposableMap, {\n      projection: \"geoMercator\",\n      projectionConfig: {\n        scale: 1000,\n        center: [19, 52]\n      },\n      children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n        children: /*#__PURE__*/_jsxDEV(Geographies, {\n          geography: geoUrl,\n          children: ({\n            geographies\n          }) => geographies.map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n            geography: geo,\n            onMouseEnter: () => {\n              // Pogrubienie obrysu województwa\n              document.getElementById(geo.rsmKey).style.strokeWidth = \"2px\";\n            },\n            onMouseLeave: () => {\n              // Przywrócenie domyślnego obrysu\n              document.getElementById(geo.rsmKey).style.strokeWidth = \"1px\";\n            },\n            onClick: () => handleVoivodeshipClick(geo.properties),\n            style: {\n              default: {\n                fill: \"#EEE\",\n                stroke: \"#000\",\n                strokeWidth: \"1px\",\n                outline: \"none\"\n              },\n              hover: {\n                fill: \"#CCC\",\n                stroke: \"#000\",\n                strokeWidth: \"2px\",\n                outline: \"none\"\n              },\n              pressed: {\n                fill: \"#AAA\",\n                stroke: \"#000\",\n                strokeWidth: \"2px\",\n                outline: \"none\"\n              }\n            }\n          }, geo.rsmKey, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), selectedVoivodeship && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: selectedVoivodeship.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: cities.map(city => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: city.name\n        }, city.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(MapaPolski, \"VFJdQSrk7Qh0/fTQfP36gUcU1/0=\");\n_c = MapaPolski;\nexport default MapaPolski;\nvar _c;\n$RefreshReg$(_c, \"MapaPolski\");","map":{"version":3,"names":["React","useState","ComposableMap","Geographies","Geography","ZoomableGroup","axios","jsxDEV","_jsxDEV","geoUrl","MapaPolski","_s","selectedVoivodeship","setSelectedVoivodeship","cities","setCities","fetchCities","voivodeshipId","response","get","data","error","console","handleVoivodeshipClick","voivodeship","id","children","projection","projectionConfig","scale","center","geography","geographies","map","geo","onMouseEnter","document","getElementById","rsmKey","style","strokeWidth","onMouseLeave","onClick","properties","default","fill","stroke","outline","hover","pressed","fileName","_jsxFileName","lineNumber","columnNumber","name","city","_c","$RefreshReg$"],"sources":["/Users/Kosmo/Documents/React/mapa-polski/src/components/MapaPolski.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from 'react-simple-maps';\nimport axios from 'axios';\n\n// GeoJSON danych dla województw Polski\nconst geoUrl = \"https://raw.githubusercontent.com/deldersveld/topojson/master/countries/poland/poland-voivodeships.json\";\n\nconst MapaPolski = () => {\n  const [selectedVoivodeship, setSelectedVoivodeship] = useState(null);\n  const [cities, setCities] = useState([]);\n\n  // Funkcja do pobierania miast z API GOV.pl\n  const fetchCities = async (voivodeshipId) => {\n    try {\n      const response = await axios.get(`https://api.stat.gov.pl/api/v1/localities?format=json&level=6&parent_id=${voivodeshipId}`);\n      setCities(response.data);\n    } catch (error) {\n      console.error(\"Błąd podczas pobierania danych:\", error);\n    }\n  };\n\n  // Obsługa kliknięcia na województwo\n  const handleVoivodeshipClick = (voivodeship) => {\n    setSelectedVoivodeship(voivodeship);\n    fetchCities(voivodeship.id); // Pobierz miasta dla wybranego województwa\n  };\n\n  return (\n    <div>\n      <ComposableMap\n        projection=\"geoMercator\"\n        projectionConfig={{\n          scale: 1000,\n          center: [19, 52],\n        }}\n      >\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map((geo) => (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  onMouseEnter={() => {\n                    // Pogrubienie obrysu województwa\n                    document.getElementById(geo.rsmKey).style.strokeWidth = \"2px\";\n                  }}\n                  onMouseLeave={() => {\n                    // Przywrócenie domyślnego obrysu\n                    document.getElementById(geo.rsmKey).style.strokeWidth = \"1px\";\n                  }}\n                  onClick={() => handleVoivodeshipClick(geo.properties)}\n                  style={{\n                    default: {\n                      fill: \"#EEE\",\n                      stroke: \"#000\",\n                      strokeWidth: \"1px\",\n                      outline: \"none\",\n                    },\n                    hover: {\n                      fill: \"#CCC\",\n                      stroke: \"#000\",\n                      strokeWidth: \"2px\",\n                      outline: \"none\",\n                    },\n                    pressed: {\n                      fill: \"#AAA\",\n                      stroke: \"#000\",\n                      strokeWidth: \"2px\",\n                      outline: \"none\",\n                    },\n                  }}\n                />\n              ))\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n\n      {/* Wyświetlanie miast po kliknięciu na województwo */}\n      {selectedVoivodeship && (\n        <div>\n          <h2>{selectedVoivodeship.name}</h2>\n          <ul>\n            {cities.map((city) => (\n              <li key={city.id}>{city.name}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MapaPolski;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}