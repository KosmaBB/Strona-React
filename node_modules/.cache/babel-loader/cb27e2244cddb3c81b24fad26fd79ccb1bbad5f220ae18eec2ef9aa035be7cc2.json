{"ast":null,"code":"var _jsxFileName = \"/Users/Kosmo/Documents/React/mapa-polski/src/components/MapaPolski.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst geoUrl = \"https://raw.githubusercontent.com/ppatrzyk/polska-geojson/master/wojewodztwa/wojewodztwa-medium.geojson\";\nconst MapaPolski = () => {\n  _s();\n  const [hoveredVoivodeship, setHoveredVoivodeship] = useState(null);\n  const [cities, setCities] = useState([]);\n  const geographyRefs = useRef({});\n  const fetchCities = async voivodeshipName => {\n    try {\n      const response = await axios.get(`http://api.geonames.org/searchJSON?q=${voivodeshipName}&country=PL&maxRows=10&username=Kosma`);\n      setCities(response.data.geonames); // Ustawienie listy miast\n    } catch (error) {\n      console.error(\"Wystąpił błąd podczas pobierania danych:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100vh\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      flexDirection: \"column\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mapa Polski\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ComposableMap, {\n      projection: \"geoMercator\",\n      projectionConfig: {\n        scale: 1500,\n        // Zwiększona skala dla większej mapy\n        center: [19, 52] // Centrum mapy na Polskę\n      },\n      style: {\n        width: \"80%\",\n        // Szerokość mapy\n        height: \"auto\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Geographies, {\n        geography: geoUrl,\n        children: ({\n          geographies\n        }) => geographies.map(geo => {\n          const isHovered = hoveredVoivodeship === geo.rsmKey;\n          return /*#__PURE__*/_jsxDEV(Geography, {\n            geography: geo,\n            onMouseEnter: () => {\n              setHoveredVoivodeship(geo.rsmKey);\n            },\n            onMouseLeave: () => {\n              setHoveredVoivodeship(null);\n            },\n            onClick: () => {\n              // Pobierz nazwę województwa z właściwości GeoJSON\n              const voivodeshipName = geo.properties.nazwa; // Poprawione: properties, nie properetis\n              fetchCities(voivodeshipName); // Pobierz miasta dla danego województwa\n            },\n            style: {\n              default: {\n                fill: \"#EEE\",\n                stroke: \"#000\",\n                strokeWidth: \"0.5px\",\n                outline: \"none\",\n                opacity: isHovered ? 1 : 0.5,\n                // Przyciemnienie reszty województw\n                transition: \"all 0.3s ease\" // Animacja\n              },\n              hover: {\n                fill: \"#EEE\",\n                stroke: \"#800080\",\n                // Fioletowy kolor obrysu\n                strokeWidth: \"2px\",\n                outline: \"none\",\n                filter: \"drop-shadow(0 0 8px rgba(128, 0, 128, 0.8))\",\n                // Efekt glow\n                transform: \"scale(1.05) translateY(-5px)\",\n                // Podniesienie i powiększenie\n                opacity: 1,\n                // Pełna widoczność\n                transition: \"all 0.3s ease\" // Animacja\n              },\n              pressed: {\n                fill: \"#EEE\",\n                stroke: \"#000\",\n                strokeWidth: \"2px\",\n                outline: \"none\"\n              }\n            }\n          }, geo.rsmKey, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), cities.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\",\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Miasta w wybranym wojew\\xF3dztwie:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: {\n          listStyle: \"none\",\n          padding: 0\n        },\n        children: cities.map(city => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: city.name\n        }, city.geonameId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(MapaPolski, \"HVth/E2+Czb6+OyCaPXiQpmsj7M=\");\n_c = MapaPolski;\nexport default MapaPolski;\nvar _c;\n$RefreshReg$(_c, \"MapaPolski\");","map":{"version":3,"names":["React","useRef","useState","ComposableMap","Geographies","Geography","axios","jsxDEV","_jsxDEV","geoUrl","MapaPolski","_s","hoveredVoivodeship","setHoveredVoivodeship","cities","setCities","geographyRefs","fetchCities","voivodeshipName","response","get","data","geonames","error","console","style","width","height","display","justifyContent","alignItems","flexDirection","children","fileName","_jsxFileName","lineNumber","columnNumber","projection","projectionConfig","scale","center","geography","geographies","map","geo","isHovered","rsmKey","onMouseEnter","onMouseLeave","onClick","properties","nazwa","default","fill","stroke","strokeWidth","outline","opacity","transition","hover","filter","transform","pressed","length","marginTop","textAlign","listStyle","padding","city","name","geonameId","_c","$RefreshReg$"],"sources":["/Users/Kosmo/Documents/React/mapa-polski/src/components/MapaPolski.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\nimport axios from 'axios';\n\nconst geoUrl = \"https://raw.githubusercontent.com/ppatrzyk/polska-geojson/master/wojewodztwa/wojewodztwa-medium.geojson\";\n\nconst MapaPolski = () => {\n  const [hoveredVoivodeship, setHoveredVoivodeship] = useState(null);\n  const [cities, setCities] = useState([]);\n  const geographyRefs = useRef({});\n\n  const fetchCities = async (voivodeshipName) => {\n    try {\n      const response = await axios.get(\n        `http://api.geonames.org/searchJSON?q=${voivodeshipName}&country=PL&maxRows=10&username=Kosma`\n      );\n      setCities(response.data.geonames); // Ustawienie listy miast\n    } catch (error) {\n      console.error(\"Wystąpił błąd podczas pobierania danych:\", error);\n    }\n  };\n\n  return (\n    <div style={{ width: \"100%\", height: \"100vh\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\", flexDirection: \"column\" }}>\n      <h1>Mapa Polski</h1>\n      <ComposableMap\n        projection=\"geoMercator\"\n        projectionConfig={{\n          scale: 1500, // Zwiększona skala dla większej mapy\n          center: [19, 52], // Centrum mapy na Polskę\n        }}\n        style={{\n          width: \"80%\", // Szerokość mapy\n          height: \"auto\",\n        }}\n      >\n        <Geographies geography={geoUrl}>\n          {({ geographies }) =>\n            geographies.map((geo) => {\n              const isHovered = hoveredVoivodeship === geo.rsmKey;\n\n              return (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  onMouseEnter={() => {\n                    setHoveredVoivodeship(geo.rsmKey);\n                  }}\n                  onMouseLeave={() => {\n                    setHoveredVoivodeship(null);\n                  }}\n                  onClick={() => {\n                    // Pobierz nazwę województwa z właściwości GeoJSON\n                    const voivodeshipName = geo.properties.nazwa; // Poprawione: properties, nie properetis\n                    fetchCities(voivodeshipName); // Pobierz miasta dla danego województwa\n                  }}\n                  style={{\n                    default: {\n                      fill: \"#EEE\",\n                      stroke: \"#000\",\n                      strokeWidth: \"0.5px\",\n                      outline: \"none\",\n                      opacity: isHovered ? 1 : 0.5, // Przyciemnienie reszty województw\n                      transition: \"all 0.3s ease\", // Animacja\n                    },\n                    hover: {\n                      fill: \"#EEE\",\n                      stroke: \"#800080\", // Fioletowy kolor obrysu\n                      strokeWidth: \"2px\",\n                      outline: \"none\",\n                      filter: \"drop-shadow(0 0 8px rgba(128, 0, 128, 0.8))\", // Efekt glow\n                      transform: \"scale(1.05) translateY(-5px)\", // Podniesienie i powiększenie\n                      opacity: 1, // Pełna widoczność\n                      transition: \"all 0.3s ease\", // Animacja\n                    },\n                    pressed: {\n                      fill: \"#EEE\",\n                      stroke: \"#000\",\n                      strokeWidth: \"2px\",\n                      outline: \"none\",\n                    },\n                  }}\n                />\n              );\n            })\n          }\n        </Geographies>\n      </ComposableMap>\n\n      {/* Wyświetlanie listy miast */}\n      {cities.length > 0 && (\n        <div style={{ marginTop: \"20px\", textAlign: \"center\" }}>\n          <h2>Miasta w wybranym województwie:</h2>\n          <ul style={{ listStyle: \"none\", padding: 0 }}>\n            {cities.map((city) => (\n              <li key={city.geonameId}>{city.name}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MapaPolski;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}